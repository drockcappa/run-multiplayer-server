import React, { useEffect, useRef, useState } from "react";

/*
Run! — Map + Multi-Runner Simulation

This single-file React component is a fully functional prototype that:
- Uses react-leaflet + OpenStreetMap tiles for real map tiles (no API key required)
- Simulates 4 runners moving along preset GPS paths in real time
- Draws each runner's "light trail" (polyline) with a distinct color
- Estimates "territory" by filling polygons between trails (simplified)
- Shows a live leaderboard sorted by distance covered

How to run locally:
1. create-react-app my-app --template cra-template-pwa (or your preferred starter)
2. npm install react-leaflet leaflet
3. Replace App.js contents with this file (or import this component)
4. IMPORTANT: Import Leaflet CSS in index.js or public/index.html:
   import 'leaflet/dist/leaflet.css';
5. Start dev server: npm start

Notes / limitations:
- This is a demo prototype. Turf calculation is simplified (we mark each runner's path
  as claimed territory rather than calculating true planar polygons with clipping.)
- For production: consider Mapbox tiles (for styling), server-side state, real GPS smoothing,
  collision / turf rules and security.
*/

import { MapContainer, TileLayer, Polyline, Marker, Popup, useMap } from 'react-leaflet';
import L from 'leaflet';

const COLORS = ['#00ffc3', '#00b3ff', '#ffb400', '#ff5c8a'];

// Simple custom icon for runners
const createRunnerIcon = (color) => {
  return L.divIcon({
    className: 'runner-icon',
    html: `<div style="width:18px;height:18px;border-radius:50%;background:${color};box-shadow:0 0 8px ${color};border:2px solid rgba(255,255,255,0.1)"></div>`,
    iconSize: [18, 18],
    iconAnchor: [9, 9]
  });
};

// Small helper that converts meters to 'miles' (very rough for display only)
const metersToMiles = (m) => (m / 1609.344).toFixed(2);

// Hook that will pan map to follow the given latlng
function MapFollow({ latlng, enabled }) {
  const map = useMap();
  useEffect(() => {
    if (!enabled || !latlng) return;
    map.setView(latlng, map.getZoom());
  }, [latlng, enabled, map]);
  return null;
}

export default function RunMapSimulation() {
  // Center on a sample city (e.g., Brooklyn-ish)
  const center = [40.7128, -74.006];

  // Define 4 runner paths (arrays of lat,lng). In real app these are GPS traces.
  const presetPaths = [
    [
      [40.7138, -74.006], [40.7145, -74.004], [40.7152, -74.002], [40.716, -74.001], [40.7168, -73.999]
    ],
    [
      [40.7115, -74.008], [40.712, -74.0065], [40.713, -74.005], [40.7142, -74.0035], [40.7158, -74.002]
    ],
    [
      [40.710, -74.005], [40.711, -74.004], [40.712, -74.003], [40.713, -74.002], [40.714, -74.001]
    ],
    [
      [40.7145, -74.009], [40.715, -74.0075], [40.7155, -74.006], [40.7162, -74.0045], [40.717, -74.003]
    ]
  ];

  // State: each runner gets a position index and an accumulated distance (meters)
  const [runners, setRunners] = useState(() => presetPaths.map((p, i) => ({
    id: i,
    name: ['Emma','Alex','Sofia','Ben'][i] || `R${i}`,
    color: COLORS[i % COLORS.length],
    path: p,
    index: 0, // current waypoint index
    covered: 0, // meters covered
    activeTrail: [p[0]] // points visited so far
  })));

  const [running, setRunning] = useState(false);
  const tickRef = useRef<number | null>(null);
  const [tickMs, setTickMs] = useState(0);
  const startTimeRef = useRef<number | null>(null);
  const [followRunner, setFollowRunner] = useState(true);
  const [followLatLng, setFollowLatLng] = useState(center);

  // simulation speed (ms per segment step)
  const SIM_STEP = 600; // lower = faster

  // compute simple distance between latlng pairs (Haversine)
  function haversine(a, b) {
    const toRad = (x) => x * Math.PI / 180;
    const R = 6371000; // meters
    const dLat = toRad(b[0] - a[0]);
    const dLon = toRad(b[1] - a[1]);
    const lat1 = toRad(a[0]);
    const lat2 = toRad(b[0]);
    const sinDlat = Math.sin(dLat/2);
    const sinDlon = Math.sin(dLon/2);
    const aa = sinDlat*sinDlat + Math.cos(lat1)*Math.cos(lat2)*sinDlon*sinDlon;
    const c = 2 * Math.atan2(Math.sqrt(aa), Math.sqrt(1-aa));
    return R * c;
  }

  // main simulation loop
  useEffect(() => {
    if (!running) {
      if (tickRef.current) { clearInterval(tickRef.current); tickRef.current = null; }
      startTimeRef.current = null;
      return;
    }

    if (!startTimeRef.current) startTimeRef.current = Date.now() - tickMs;

    tickRef.current = window.setInterval(() => {
      const now = Date.now();
      const elapsed = now - (startTimeRef.current || now);
      setTickMs(elapsed);

      setRunners(prev => prev.map((r) => {
        const path = r.path;
        // move along path one step at a time
        let newIndex = r.index;
        if (newIndex < path.length - 1) {
          newIndex = r.index + 1; // step forward one waypoint
        } else {
          // optionally loop for continuous motion
          newIndex = 0;
        }

        // compute distance between previous and new
        const prevPt = path[r.index];
        const newPt = path[newIndex];
        const d = haversine(prevPt, newPt);

        return {
          ...r,
          index: newIndex,
          covered: r.covered + d,
          activeTrail: [...r.activeTrail, newPt]
        };
      }));

    }, SIM_STEP);

    return () => {
      if (tickRef.current) clearInterval(tickRef.current);
      tickRef.current = null;
    };
  }, [running]);

  // keep follow latlng updated to one runner (e.g., runner 0)
  useEffect(() => {
    if (!followRunner) return;
    const lead = runners[0];
    const curr = lead.path[lead.index] || center;
    setFollowLatLng(curr);
  }, [runners, followRunner]);

  const start = () => {
    if (!running) setRunning(true);
  };
  const pause = () => { if (running) setRunning(false); };
  const reset = () => {
    setRunning(false);
    setTickMs(0);
    startTimeRef.current = null;
    setRunners(presetPaths.map((p, i) => ({
      id: i,
      name: ['Emma','Alex','Sofia','Ben'][i] || `R${i}`,
      color: COLORS[i % COLORS.length],
      path: p,
      index: 0,
      covered: 0,
      activeTrail: [p[0]]
    })));
  };

  // leaderboard sorted by covered distance
  const leaderboard = [...runners].sort((a,b) => b.covered - a.covered).map((r, i) => ({ name: r.name, miles: metersToMiles(r.covered), color: r.color }));

  return (
    <div className="min-h-screen bg-slate-900 text-white p-4 font-sans">
      <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-4">
        <div className="lg:col-span-2 bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl p-4 shadow-lg">
          <h2 className="text-2xl font-bold mb-2">Run! — Live Simulation</h2>
          <p className="text-slate-400 mb-3">Real map tiles (OpenStreetMap) + simulated multi-runner Tron-like trails.</p>

          <div style={{ height: 540 }} className="rounded-lg overflow-hidden shadow-inner">
            <MapContainer center={center} zoom={15} style={{ height: '100%', width: '100%' }}>
              <TileLayer
                attribution='© OpenStreetMap contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              />

              {/* draw each runner's trail */}
              {runners.map((r) => (
                <React.Fragment key={r.id}>
                  <Polyline positions={r.activeTrail} color={r.color} weight={4} opacity={0.95} />
                  <Marker position={r.activeTrail[r.activeTrail.length - 1]} icon={createRunnerIcon(r.color)}>
                    <Popup>
                      <div style={{ minWidth: 140 }}>
                        <strong>{r.name}</strong>
                        <div>Distance: {metersToMiles(r.covered)} mi</div>
                        <div>Steps: {r.activeTrail.length}</div>
                      </div>
                    </Popup>
                  </Marker>
                </React.Fragment>
              ))}

              {/* Optional map follow control */}
              <MapFollow latlng={followLatLng} enabled={followRunner} />

            </MapContainer>
          </div>

          <div className="mt-3 flex gap-2">
            {!running ? (
              <button onClick={start} className="px-4 py-2 rounded bg-green-500 text-black font-bold">Start Simulation</button>
            ) : (
              <button onClick={pause} className="px-4 py-2 rounded bg-orange-500 text-black font-bold">Pause</button>
            )}
            <button onClick={reset} className="px-4 py-2 rounded bg-slate-700">Reset</button>
            <button onClick={() => setFollowRunner(f => !f)} className="px-4 py-2 rounded bg-slate-700">{followRunner ? 'Unfollow' : 'Follow'}</button>
            <div className="ml-auto text-sm text-slate-400 self-center">Sim time: {(tickMs/1000).toFixed(0)}s</div>
          </div>
        </div>

        <aside className="bg-slate-800 rounded-2xl p-4 shadow-lg">
          <h3 className="text-lg font-bold mb-2">Leaderboard</h3>
          <ol className="space-y-2">
            {leaderboard.map((p, i) => (
              <li key={i} className="flex items-center justify-between bg-slate-900/40 p-2 rounded">
                <div className="flex items-center gap-3">
                  <div style={{ width: 28, height: 28, borderRadius: 8, background: p.color, boxShadow: `0 0 8px ${p.color}` }} />
                  <div>
                    <div className="font-semibold">{p.name}</div>
                    <div className="text-xs text-slate-400">runner</div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-bold">{p.miles}</div>
                  <div className="text-xs text-slate-400">mi</div>
                </div>
              </li>
            ))}
          </ol>

          <div className="mt-4 bg-slate-900/30 p-3 rounded">
            <h4 className="font-semibold">Quick Info</h4>
            <p className="text-xs text-slate-400">Each simulated runner moves one waypoint per tick. Trails are polylines — in production you'd capture continuous GPS and smooth tracks before generating territory polygons.</p>
          </div>

        </aside>
      </div>

      <footer className="max-w-6xl mx-auto mt-6 text-sm text-slate-500">Prototype • Uses OpenStreetMap tiles via react-leaflet. For production use Mapbox or a paid tiles provider and rate-limit tile usage properly.</footer>
    </div>
  );
}
